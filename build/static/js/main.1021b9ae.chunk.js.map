{"version":3,"sources":["components/Note.js","components/Notification.js","components/services/notes.js","components/App.js","index.js"],"names":["Note","note","toggleInportance","label","important","content","onClick","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","noteToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAceA,EAZF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UACf,qBAAuB,iBAE5B,OACA,4BACGH,EAAKI,QACR,4BAAQC,QAASJ,GAAmBC,KCKzBI,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAc,MAAXA,EACQ,KAIP,yBAAKC,UAAU,SACVD,I,gBCRPE,EAAU,oDAoBD,EAlBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAClB,OAAQA,EAASC,SAeR,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OACxBA,EAASC,SAQF,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC4E9BK,EAxFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,qBAFhB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,uBAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEClB,MAAK,SAAAmB,GACFT,EAASS,QAEd,IAEH,IAAMC,EAAaP,EACjBJ,EAAQA,EAAMY,QAAO,SAAAjC,GAAI,OAAIA,EAAKG,aA4CpC,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcI,QAASoB,IACvB,6BACI,4BAAQtB,QAAS,kBAAMqB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACGO,EAAWE,KAAI,SAAAlC,GAAI,OACnB,kBAAC,EAAD,CACAmC,IAAKnC,EAAKiB,GACVjB,KAAMA,EACNC,iBAAkB,kBAnCF,SAACgB,GACf,sCAAkCA,GAA3C,IACMjB,EAAOqB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,eAAQtC,EAAR,CAAcG,WAAYH,EAAKG,YAEhD2B,EACUb,EAAIqB,GACX1B,MAAK,SAAA2B,GACFjB,EAASD,EAAMa,KAAI,SAAAlC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOuC,SAEtDC,OAAM,SAAAC,GACHb,EAAgB,SAAD,OACF5B,EAAKI,QADH,sCAGfsC,YAAW,WACPd,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEpB,KAAOA,SAkBX0B,CAAmB3C,EAAKiB,WAInD,0BAAM2B,SA5DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf3C,QAASmB,EACTyB,KAAM,IAAIC,KACV9C,UAAW+C,KAAKC,SAAW,IAG/BrB,EACQiB,GACPnC,MAAK,SAAA2B,GACFjB,EAASD,EAAM+B,OAAOb,IACtBf,EAAW,SAiDP,2BACE6B,MAAO9B,GAAW,GAClB+B,SA/CW,SAACT,GACtBU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB7B,EAAWqB,EAAMY,OAAOJ,UA+ChB,4BAAQK,KAAK,UAAb,WCpFhBC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.1021b9ae.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleInportance })=> {\n     const label = note.important \n       ? 'make not important' : 'make important'\n\n    return (\n    <li>\n      {note.content}\n    <button onClick={toggleInportance}>{label}</button>\n    </li>\n    )\n  }\n\nexport default Note  \n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if(message == null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from \"axios\"\nconst baseUrl = 'https://agile-ridge-71998.herokuapp.com/api/notes' \n\nconst getAll = () => { \n    const request = axios.get(baseUrl)\n    return request.then(response => {\n      return  response.data\n    })\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => \n        response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React, { useState, useEffect } from 'react'\nimport Note from './Note'\nimport Notification from './Notification'\n\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState()\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('some error happened')\n\n    useEffect(() => {\n        noteService\n        .getAll()\n        .then(initialNotes => {\n            setNotes(initialNotes)\n        })\n    }, [])\n\n    const noteToShow = showAll ? \n      notes : notes.filter(note => note.important)\n    \n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date(),\n            important: Math.random() < 0.5,\n        }\n\n        noteService\n        .create(noteObject)\n        .then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n            setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n        const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n          .update(id, changedNote)\n          .then(returnedNote => {\n              setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n          })\n          .catch(error => {\n              setErrorMessage(\n                  `Note '${note.content}' was already removed from server`\n              )\n              setTimeout(() => {\n                  setErrorMessage(null)\n              }, 5000)\n              setNotes(notes.filter(n => n.id !== id))\n          })\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n              {noteToShow.map(note => \n               <Note \n               key={note.id}\n               note={note}\n               toggleInportance={() => toggleImportanceOf(note.id)}\n               />\n              )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input  \n                  value={newNote || ''}\n                  onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\nReactDOM.render( <App />,document.getElementById('root'))\n\n\n"],"sourceRoot":""}